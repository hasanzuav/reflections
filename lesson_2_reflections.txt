What happens when you initialize a repository? Why do you need to do it?

-You need to initialize a repository so the system knows that you want to version control the folders, and will create the right house-keeping files to track the metadata and file versions. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area does not exist in the repository yet but is what will be commited when you use git commit. The entire working directory will not be commited. This allows greater control to how you craft and submit repository commits (changes). 

How can you use the staging area to make sure you have one commit per logical change?

- You can use the staging area to contain your git add to only files that you want to commit per logical change. You can use the git diff --staged command to determine the difference between the staging area and the repo's master commit. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help? 

- Branches would be useful in creating backups and trying out experimental features and additions. It would keep it seperate from your master branch and easily accessible to switch to. 

How do the diagrams help you visualize the branch structure?

- Diagrams help visualize the branch structure because you can see individual branches and see how many commits were applied and where in the code (how far back) they originated from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

- The pros and cons of Git's auto merge vs. manually doing the merge is that you will save time in the automerge. You might even make less mistakes if it is automated. However, Git is not intelligent so it does not have the ability to make intelligent changes and might make you waste more time, make more errors, than if you did it manually. 